---
# tasks file for intel_sgx_psw

- name: Include variables
  ansible.builtin.include_vars:
    file: main.yml

- name: Install required dependencies
  ansible.builtin.apt:
    name: "{{ install_deps }}"
    state: present
    update_cache: true
    install_recommends: false
  become: true

- name: Add APT repository key
  ansible.builtin.apt_key:
    url: "https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key"
    state: present
  become: true

- name: Add APT repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu {{ ansible_distribution_release }} main"
    state: present
    update_cache: true
  become: true

- name: Install the Intel sgx packages
  ansible.builtin.apt:
    name: "{{ intel_sgx_packages }}"
    state: present
    update_cache: true
    install_recommends: false
  become: true

- name: Install the Intel sgx debug packages
  ansible.builtin.apt:
    name: "{{ intel_sgx_debug_packages }}"
    state: present
    update_cache: true
    install_recommends: false
  become: true
  when: install_sgx_debug

- name: Install the Intel sgx development packages
  ansible.builtin.apt:
    name: "{{ intel_sgx_dev_packages }}"
    state: present
    update_cache: true
    install_recommends: false
  become: true
  when: install_sgx_dev

- name: Ensure group "sgx_prv" exists
  ansible.builtin.group:
    name: sgx_prv
    state: present
  become: true

- name: Ensure group "sgx" exists
  ansible.builtin.group:
    name: sgx
    state: present
  become: true

- name: udev rule sgx_provision
  ansible.builtin.replace:
    path: /etc/udev/rules.d/93-sgx-provision.rules
    regexp: 'MODE=\"0660\"'
    replace: 'MODE="0666"'

- name: udev rule sgx_enclave
  ansible.builtin.lineinfile:
    path: /etc/udev/rules.d/94-sgx-enclave.rules
    line: 'SUBSYSTEM=="misc",KERNEL=="sgx_enclave",SYMLINK+="sgx/enclave",GROUP="sgx",MODE="0666"'
    search_string: "SUBSYSTEM"
    state: present
  become: true
  vars:
    new_version: "{{ ansible_facts['os_family'] == 'Debian' and ansible_facts['distribution_major_version'] | int >= 22 }}"
  when: new_version | bool

- name: Reload udev rules
  ansible.builtin.command: udevadm trigger
  become: true
